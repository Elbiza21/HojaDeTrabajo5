import simpy
import random
import statistics
import matplotlib.pyplot as plt

RANDOM_SEED = 42
INTERVALO_PROCESOS = [10, 5, 1]
RAM_CAPACITY = 100
INSTRUCCIONES_POR_TIEMPO = 3

class Proceso:
    def __init__(self, env, nombre, ram, cpu, instrucciones):
        self.env = env
        self.nombre = nombre
        self.ram = ram
        self.cpu = cpu
        self.instrucciones = instrucciones
        self.memoria = random.randint(1, 10)
        self.tiempo_inicio = env.now

    def run(self):
        # Solicitar memoria
        yield self.ram.get(self.memoria)
        # Esperar CPU
        while self.instrucciones > 0:
            with self.cpu.request() as req:
                yield req
                yield self.env.timeout(1)
                self.instrucciones -= min(INSTRUCCIONES_POR_TIEMPO, self.instrucciones)
                if random.randint(1, 21) == 1:
                    yield self.env.timeout(random.randint(1, 5))
        # Liberar memoria
        yield self.ram.put(self.memoria)
        tiempos.append(self.env.now - self.tiempo_inicio)


def correr_simulacion(cantidad_procesos, intervalo, ram_capacity=100, instrucciones_por_tiempo=3, cpus=1):
    global tiempos
    tiempos = []
    env = simpy.Environment()
    ram = simpy.Container(env, init=ram_capacity, capacity=ram_capacity)
    cpu = simpy.Resource(env, capacity=cpus)

    for i in range(cantidad_procesos):
        instrucciones = random.randint(1, 10)
        proceso = Proceso(env, f"Proceso-{i}", ram, cpu, instrucciones)
        env.process(proceso.run())
        yield env.timeout(random.expovariate(1.0 / intervalo))

    env.run()
    return statistics.mean(tiempos), statistics.stdev(tiempos)


def graficar_resultados(resultados, intervalo, label):
    plt.plot([25, 50, 100, 150, 200], resultados, marker='o', label=label)


if __name__ == "__main__":
    random.seed(RANDOM_SEED)

    for intervalo in INTERVALO_PROCESOS:
        promedios = []
        for procesos in [25, 50, 100, 150, 200]:
            promedio, desviacion = correr_simulacion(procesos, intervalo)
            print(f"{procesos} procesos, intervalo {intervalo}: Promedio={promedio:.2f}, Desv={desviacion:.2f}")
            promedios.append(promedio)
        graficar_resultados(promedios, intervalo, f'Intervalo {intervalo}')

    # Prueba con memoria incrementada a 200
    for intervalo in INTERVALO_PROCESOS:
        promedios = []
        for procesos in [25, 50, 100, 150, 200]:
            promedio, desviacion = correr_simulacion(procesos, intervalo, ram_capacity=200)
            promedios.append(promedio)
        graficar_resultados(promedios, intervalo, f'Memoria 200, Int {intervalo}')

    # Prueba con CPU más rápido (6 instrucciones por unidad de tiempo)
    for intervalo in INTERVALO_PROCESOS:
        promedios = []
        for procesos in [25, 50, 100, 150, 200]:
            promedio, desviacion = correr_simulacion(procesos, intervalo, instrucciones_por_tiempo=6)
            promedios.append(promedio)
        graficar_resultados(promedios, intervalo, f'CPU rápido, Int {intervalo}')

    # Prueba con 2 CPUs
    for intervalo in INTERVALO_PROCESOS:
        promedios = []
        for procesos in [25, 50, 100, 150, 200]:
            promedio, desviacion = correr_simulacion(procesos, intervalo, cpus=2)
            promedios.append(promedio)
        graficar_resultados(promedios, intervalo, f'2 CPUs, Int {intervalo}')

    plt.xlabel('Número de procesos')
    plt.ylabel('Tiempo promedio en el sistema')
    plt.legend()
    plt.show()
